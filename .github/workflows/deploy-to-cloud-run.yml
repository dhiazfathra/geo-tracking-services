name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'prisma/**'
      - 'package.json'
      - 'Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'prisma/**'
      - 'package.json'
      - 'Dockerfile'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate

      - name: Create .env file
        run: |
          echo "PORT=3000" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "JWT_APP_SECRET=${{ secrets.JWT_APP_SECRET }}" >> .env
          echo "JWT_CMS_SECRET=${{ secrets.JWT_CMS_SECRET }}" >> .env
          echo "JWT_EXPIRED=${{ secrets.JWT_EXPIRED }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "JWT_REFRESH_EXPIRED=${{ secrets.JWT_REFRESH_EXPIRED }}" >> .env
          echo "PING_INTERVAL_SECONDS=${{ secrets.PING_INTERVAL_SECONDS }}" >> .env
          echo "MQTT_BROKER_URL=${{ secrets.MQTT_BROKER_URL }}" >> .env
          echo "MQTT_CLIENT_ID=${{ secrets.MQTT_CLIENT_ID }}" >> .env
          echo "MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}" >> .env
          echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> .env
          echo "MQTT_TOPIC_LOCATION=${{ secrets.MQTT_TOPIC_LOCATION }}" >> .env
          echo "MQTT_TOPIC_DEVICE_STATUS=${{ secrets.MQTT_TOPIC_DEVICE_STATUS }}" >> .env
          echo "MQTT_TOPIC_COMMANDS=${{ secrets.MQTT_TOPIC_COMMANDS }}" >> .env
          echo "CLOUDSQL_USER=${{ secrets.CLOUDSQL_USER }}" >> .env
          echo "CLOUDSQL_PASSWORD=${{ secrets.CLOUDSQL_PASSWORD }}" >> .env
          echo "CLOUDSQL_DATABASE=${{ secrets.CLOUDSQL_DATABASE }}" >> .env
          echo "CLOUDSQL_INSTANCE_NAME=${{ secrets.CLOUDSQL_INSTANCE_NAME }}" >> .env

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Authenticate Docker
        run: |
          gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev --quiet
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}

      - name: Docker build
        run: |
          docker build -t ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/geo-tracking-repo/geo-tracking-service:${{ github.sha }} .
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Push Docker image
        run: |
          docker push ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/geo-tracking-repo/geo-tracking-service:${{ github.sha }}
        env:
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Install Cloud SQL Proxy
        run: |
          # Download and install the Cloud SQL Auth Proxy
          wget https://dl.google.com/cloudsql/cloud_sql_proxy_x64_linux -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          sudo mv cloud_sql_proxy /usr/local/bin/
          
      - name: Run Prisma migrations
        run: |
          echo "Running Prisma migrations..."
          # Set DATABASE_URL for migrations
          export DATABASE_URL="postgresql://${CLOUDSQL_USER}:${CLOUDSQL_PASSWORD}@localhost/${CLOUDSQL_DATABASE}?schema=public"
          
          # Create service account key file
          echo "$GCP_SA_KEY" > sa-key.json
          
          # Start Cloud SQL Proxy in the background
          echo "Starting Cloud SQL Proxy..."
          cloud_sql_proxy -instances=${CLOUDSQL_INSTANCE_NAME}=tcp:5432 -credential_file=sa-key.json &
          PROXY_PID=$!
          
          # Wait for proxy to start
          sleep 10
          
          # Run migrations
          echo "Deploying migrations..."
          npx prisma migrate deploy
          
          # Kill the proxy
          kill $PROXY_PID
          
          # Clean up
          rm sa-key.json
        env:
          CLOUDSQL_USER: ${{ secrets.CLOUDSQL_USER }}
          CLOUDSQL_PASSWORD: ${{ secrets.CLOUDSQL_PASSWORD }}
          CLOUDSQL_DATABASE: ${{ secrets.CLOUDSQL_DATABASE }}
          CLOUDSQL_INSTANCE_NAME: ${{ secrets.CLOUDSQL_INSTANCE_NAME }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Cloud Run
        run: |
          # Construct DATABASE_URL for Cloud SQL connection in Cloud Run
          DATABASE_URL="postgresql://${CLOUDSQL_USER}:${CLOUDSQL_PASSWORD}@localhost/${CLOUDSQL_DATABASE}?host=/cloudsql/${CLOUDSQL_INSTANCE_NAME}"
          
          gcloud run deploy geo-tracking-service \
            --image ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/geo-tracking-repo/geo-tracking-service:${{ github.sha }} \
            --region ${GCP_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=0 \
            --port=3000 \
            --set-env-vars="NODE_ENV=production,DATABASE_URL=${DATABASE_URL},JWT_APP_SECRET=${JWT_APP_SECRET},JWT_CMS_SECRET=${JWT_CMS_SECRET},JWT_EXPIRED=${JWT_EXPIRED},JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET},JWT_REFRESH_EXPIRED=${JWT_REFRESH_EXPIRED},MQTT_BROKER_URL=${MQTT_BROKER_URL},MQTT_CLIENT_ID=${MQTT_CLIENT_ID},MQTT_USERNAME=${MQTT_USERNAME},MQTT_PASSWORD=${MQTT_PASSWORD},MQTT_TOPIC_LOCATION=${MQTT_TOPIC_LOCATION},MQTT_TOPIC_DEVICE_STATUS=${MQTT_TOPIC_DEVICE_STATUS},MQTT_TOPIC_COMMANDS=${MQTT_TOPIC_COMMANDS}" \
            --add-cloudsql-instances=${CLOUDSQL_INSTANCE_NAME} \
            --quiet
        env:
          CLOUDSQL_USER: ${{ secrets.CLOUDSQL_USER }}
          CLOUDSQL_PASSWORD: ${{ secrets.CLOUDSQL_PASSWORD }}
          CLOUDSQL_DATABASE: ${{ secrets.CLOUDSQL_DATABASE }}
          CLOUDSQL_INSTANCE_NAME: ${{ secrets.CLOUDSQL_INSTANCE_NAME }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          JWT_APP_SECRET: ${{ secrets.JWT_APP_SECRET }}
          JWT_CMS_SECRET: ${{ secrets.JWT_CMS_SECRET }}
          JWT_EXPIRED: ${{ secrets.JWT_EXPIRED }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRED: ${{ secrets.JWT_REFRESH_EXPIRED }}
          MQTT_BROKER_URL: ${{ secrets.MQTT_BROKER_URL }}
          MQTT_CLIENT_ID: ${{ secrets.MQTT_CLIENT_ID }}
          MQTT_USERNAME: ${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
          MQTT_TOPIC_LOCATION: ${{ secrets.MQTT_TOPIC_LOCATION }}
          MQTT_TOPIC_DEVICE_STATUS: ${{ secrets.MQTT_TOPIC_DEVICE_STATUS }}
          MQTT_TOPIC_COMMANDS: ${{ secrets.MQTT_TOPIC_COMMANDS }}
